% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pca2go.R
\name{limmaquickpca2go}
\alias{limmaquickpca2go}
\title{Functional interpretation of the principal components, based on simple
overrepresentation analysis}
\usage{
limmaquickpca2go(se, pca_ngenes = 10000, inputType = "ENSEMBL",
  organism = "Mm", loadings_ngenes = 500, background_genes = NULL,
  scale = FALSE, ...)
}
\arguments{
\item{se}{A \code{\link{DESeqTransform}} object, with data in \code{assay(se)},
produced for example by either \code{\link{rlog}} or
\code{\link{varianceStabilizingTransformation}}}

\item{pca_ngenes}{Number of genes to use for the PCA}

\item{inputType}{Input format type of the gene identifiers. Deafults to \code{ENSEMBL}, that then will
be converted to ENTREZ ids. Can assume values such as \code{ENTREZID},\code{GENENAME} or \code{SYMBOL},
like it is normally used with the \code{select} function of \code{AnnotationDbi}}

\item{organism}{Character abbreviation for the species, using \code{org.XX.eg.db} for annotation}

\item{loadings_ngenes}{Number of genes to extract the loadings (in each direction)}

\item{background_genes}{Which genes to consider as background.}

\item{scale}{Logical, defaults to FALSE, scale values for the PCA}

\item{...}{Further parameters to be passed to the topGO routine}
}
\value{
A nested list object containing for each principal component the terms enriched
in each direction. This object is to be thought in combination with the displaying feature
of the main \code{\link{pcaExplorer}} function
}
\description{
Extracts the genes with the highest loadings for each principal component, and
performs functional enrichment analysis on them using the simple and quick routine
provided by the \code{limma} package
}
\examples{

library(airway)
library(DESeq2)
library(limma)
data(airway)
airway
dds_airway <- DESeqDataSet(airway, design= ~ cell + dex)
dds_airway <- DESeq(dds_airway)
res_airway <- results(dds_airway)
library("AnnotationDbi")
library("org.Hs.eg.db")
res_airway$symbol <- mapIds(org.Hs.eg.db,
                            keys=row.names(res_airway),
                            column="SYMBOL",
                            keytype="ENSEMBL",
                            multiVals="first")
res_airway$entrez <- mapIds(org.Hs.eg.db,
                            keys=row.names(res_airway),
                            column="ENTREZID",
                            keytype="ENSEMBL",
                            multiVals="first")
resOrdered <- as.data.frame(res_airway[order(res_airway$padj),])
de_df <- resOrdered[resOrdered$padj < .05 & !is.na(resOrdered$padj),]
de_symbols <- de_df$symbol
bg_ids <- rownames(dds_airway)[rowSums(counts(dds_airway)) > 0]
bg_symbols <- mapIds(org.Hs.eg.db,
                     keys=bg_ids,
                     column="SYMBOL",
                     keytype="ENSEMBL",
                     multiVals="first")
goquick_airway <- limmaquickpca2go(dds_airway,
                                   pca_ngenes = 10000,
                                   inputType = "ENSEMBL",
                                   organism = "Hs")


}

